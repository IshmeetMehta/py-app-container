# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# [START cloudbuild]
# Access the id_github file from Secret Manager, and setup SSH
steps:
# This step runs the unit tests on the app
# - name: 'python:3.7-slim'
#   id: 'Run Tests'
#   entrypoint: /bin/sh
#   args:
#   - -c
#   - 'pip install flask && python test_app.py -v'

#   # This step pushes the image to AKS Kubernetes cluster
# - name: 'gcr.io/cloud-builders/gcloud'
#   entrypoint: /bin/sh
#   id: 'Test Deploy to Anthos registered AKS cluster 1.0'
#   waitFor: ['Run Tests']
#   args:
#   - '-c'
#   - |
#     set -x && \
#     export KUBECONFIG="$(pwd)/gateway-aks-kubeconfig" && \
#     gcloud beta container hub memberships get-credentials aks-cluster && \
#     kubectl --kubeconfig=gateway-aks-kubeconfig apply -k k8s/overlays/production
#   # [END cloudbuild]


# # This step deploys the image to GKE cluster
# - name: 'gcr.io/cloud-builders/gcloud'
#   entrypoint: /bin/sh
#   id: "Test Deploy to Anthos registered GKE cluster 1.0 "
#   waitFor: ['Run Tests']
#   args:
#   - '-c'
#   - |
#     set -x && \
#     export KUBECONFIG="$(pwd)/gateway-gke-kubeconfig" && \
#     gcloud beta container hub memberships get-credentials gke-cluster && \
#     kubectl --kubeconfig=gateway-gke-kubeconfig apply -k k8s/overlays/production
#   # [END cloudbuild]

# # This step builds the container image.
# - name: 'gcr.io/cloud-builders/docker'
#   id: 'Create Container'
#   args:
#   - 'build'
#   - '-t'
#   - 'gcr.io/$PROJECT_ID/gcpdemopython:prod'
#   - '.'

# # This step pushes the image to Container Registry
# # The PROJECT_ID and SHORT_SHA variables are automatically
# # replaced by Cloud Build.
# - name: 'gcr.io/cloud-builders/docker'
#   id: 'Push to GCR Container Registry'
#   args:
#   - 'push'
#   - 'gcr.io/$PROJECT_ID/gcpdemopython:prod'

# This step deletes the existing deployment of Anthos AKS cluster
# - name: 'gcr.io/cloud-builders/gcloud'
#   entrypoint: /bin/sh
#   id: "Delete from AKS cluster"
#   args:
#   - '-c'
#   - |
#     set -x && \
#     export KUBECONFIG="$(pwd)/gateway-aks-delete-kubeconfig" && \
#     gcloud beta container hub memberships get-credentials aks-cluster && \
#     kubectl --kubeconfig=gateway-aks-delete-kubeconfig delete -k k8s/overlays/production
#   

# This step deletes the existing deployment of Anthos GKE cluster
# - name: 'gcr.io/cloud-builders/gcloud'
#   entrypoint: /bin/sh
#   id: "Delete from GKE cluster"
#   args:
#   - '-c'
#   - |
#     set -x && \
#     export KUBECONFIG="$(pwd)/gateway-gke-delete-kubeconfig" && \
#     gcloud beta container hub memberships get-credentials gke-cluster-1 && \
#     kubectl --kubeconfig=gateway-gke-delete-kubeconfig delete -k k8s/overlays/production


# This step deploys the image to AKS cluster
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: /bin/sh
  id: "Deploy to Anthos AKS cluster"
# waitFor: ['Delete from AKS cluster']
  args:
  - '-c'
  - |
    set -x && \
    export KUBECONFIG="$(pwd)/gateway-aks-kubeconfig" && \
    gcloud beta container hub memberships get-credentials aks-cluster && \
    kubectl --kubeconfig=gateway-aks-kubeconfig apply -k k8s/overlays/production


# This step deploys the image to GKE cluster
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: /bin/sh
  id: "Deploy to Anthos registered GKE cluster"
#  waitFor: ['Delete from GKE cluster']
  args:
  - '-c'
  - |
    set -x && \
    export KUBECONFIG="$(pwd)/gateway-gke-kubeconfig" && \
    gcloud beta container hub memberships get-credentials gke-cluster && \
    kubectl --kubeconfig=gateway-gke-kubeconfig apply -k k8s/overlays/production
  # [END cloudbuild]